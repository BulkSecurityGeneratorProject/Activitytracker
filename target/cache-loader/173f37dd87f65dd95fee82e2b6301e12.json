{"remainingRequest":"C:\\Users\\sanka\\Desktop\\Activitytracker\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\Users\\sanka\\Desktop\\Activitytracker\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\Users\\sanka\\Desktop\\Activitytracker\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\sanka\\Desktop\\Activitytracker\\node_modules\\tslint-loader\\index.js!C:\\Users\\sanka\\Desktop\\Activitytracker\\src\\main\\webapp\\app\\entities\\activity\\activity.service.ts","dependencies":[{"path":"C:\\Users\\sanka\\Desktop\\Activitytracker\\src\\main\\webapp\\app\\entities\\activity\\activity.service.ts","mtime":1549946983549},{"path":"C:\\Users\\sanka\\Desktop\\Activitytracker\\node_modules\\angular2-template-loader\\index.js","mtime":1549946770931},{"path":"C:\\Users\\sanka\\Desktop\\Activitytracker\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1549946778003},{"path":"C:\\Users\\sanka\\Desktop\\Activitytracker\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1549946934376},{"path":"C:\\Users\\sanka\\Desktop\\Activitytracker\\node_modules\\ts-loader\\index.js","mtime":1549946939386},{"path":"C:\\Users\\sanka\\Desktop\\Activitytracker\\node_modules\\angular-router-loader\\src\\index.js","mtime":1549946770917},{"path":"C:\\Users\\sanka\\Desktop\\Activitytracker\\node_modules\\tslint-loader\\index.js","mtime":1549946939613}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar http_1 = require(\"@angular/common/http\");\r\nvar moment = require(\"moment\");\r\nvar input_constants_1 = require(\"app/shared/constants/input.constants\");\r\nvar operators_1 = require(\"rxjs/operators\");\r\nvar app_constants_1 = require(\"app/app.constants\");\r\nvar shared_1 = require(\"app/shared\");\r\nvar ActivityService = /** @class */ (function () {\r\n    function ActivityService(http) {\r\n        this.http = http;\r\n        this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/activities';\r\n    }\r\n    ActivityService.prototype.create = function (activity) {\r\n        var _this = this;\r\n        var copy = this.convertDateFromClient(activity);\r\n        return this.http\r\n            .post(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\r\n    };\r\n    ActivityService.prototype.update = function (activity) {\r\n        var _this = this;\r\n        var copy = this.convertDateFromClient(activity);\r\n        return this.http\r\n            .put(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\r\n    };\r\n    ActivityService.prototype.find = function (id) {\r\n        var _this = this;\r\n        return this.http\r\n            .get(this.resourceUrl + \"/\" + id, { observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\r\n    };\r\n    ActivityService.prototype.query = function (req) {\r\n        var _this = this;\r\n        var options = shared_1.createRequestOption(req);\r\n        return this.http\r\n            .get(this.resourceUrl, { params: options, observe: 'response' })\r\n            .pipe(operators_1.map(function (res) { return _this.convertDateArrayFromServer(res); }));\r\n    };\r\n    ActivityService.prototype.delete = function (id) {\r\n        return this.http.delete(this.resourceUrl + \"/\" + id, { observe: 'response' });\r\n    };\r\n    ActivityService.prototype.convertDateFromClient = function (activity) {\r\n        var copy = Object.assign({}, activity, {\r\n            activitydate: activity.activitydate != null && activity.activitydate.isValid() ? activity.activitydate.format(input_constants_1.DATE_FORMAT) : null,\r\n            starttime: activity.starttime != null && activity.starttime.isValid() ? activity.starttime.format(input_constants_1.DATE_FORMAT) : null,\r\n            endtime: activity.endtime != null && activity.endtime.isValid() ? activity.endtime.format(input_constants_1.DATE_FORMAT) : null\r\n        });\r\n        return copy;\r\n    };\r\n    ActivityService.prototype.convertDateFromServer = function (res) {\r\n        if (res.body) {\r\n            res.body.activitydate = res.body.activitydate != null ? moment(res.body.activitydate) : null;\r\n            res.body.starttime = res.body.starttime != null ? moment(res.body.starttime) : null;\r\n            res.body.endtime = res.body.endtime != null ? moment(res.body.endtime) : null;\r\n        }\r\n        return res;\r\n    };\r\n    ActivityService.prototype.convertDateArrayFromServer = function (res) {\r\n        if (res.body) {\r\n            res.body.forEach(function (activity) {\r\n                activity.activitydate = activity.activitydate != null ? moment(activity.activitydate) : null;\r\n                activity.starttime = activity.starttime != null ? moment(activity.starttime) : null;\r\n                activity.endtime = activity.endtime != null ? moment(activity.endtime) : null;\r\n            });\r\n        }\r\n        return res;\r\n    };\r\n    var _a;\r\n    ActivityService = tslib_1.__decorate([\r\n        core_1.Injectable({ providedIn: 'root' }),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\r\n    ], ActivityService);\r\n    return ActivityService;\r\n}());\r\nexports.ActivityService = ActivityService;\r\n",{"version":3,"file":"C:\\Users\\sanka\\Desktop\\Activitytracker\\src\\main\\webapp\\app\\entities\\activity\\activity.service.ts","sourceRoot":"","sources":["C:\\Users\\sanka\\Desktop\\Activitytracker\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\sanka\\Desktop\\Activitytracker\\node_modules\\tslint-loader\\index.js!C:\\Users\\sanka\\Desktop\\Activitytracker\\src\\main\\webapp\\app\\entities\\activity\\activity.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport * as moment from 'moment';\r\nimport { DATE_FORMAT } from 'app/shared/constants/input.constants';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { SERVER_API_URL } from 'app/app.constants';\r\nimport { createRequestOption } from 'app/shared';\r\nimport { IActivity } from 'app/shared/model/activity.model';\r\n\r\ntype EntityResponseType = HttpResponse<IActivity>;\r\ntype EntityArrayResponseType = HttpResponse<IActivity[]>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ActivityService {\r\n    public resourceUrl = SERVER_API_URL + 'api/activities';\r\n\r\n    constructor(protected http: HttpClient) {}\r\n\r\n    create(activity: IActivity): Observable<EntityResponseType> {\r\n        const copy = this.convertDateFromClient(activity);\r\n        return this.http\r\n            .post<IActivity>(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n    }\r\n\r\n    update(activity: IActivity): Observable<EntityResponseType> {\r\n        const copy = this.convertDateFromClient(activity);\r\n        return this.http\r\n            .put<IActivity>(this.resourceUrl, copy, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n    }\r\n\r\n    find(id: number): Observable<EntityResponseType> {\r\n        return this.http\r\n            .get<IActivity>(`${this.resourceUrl}/${id}`, { observe: 'response' })\r\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n    }\r\n\r\n    query(req?: any): Observable<EntityArrayResponseType> {\r\n        const options = createRequestOption(req);\r\n        return this.http\r\n            .get<IActivity[]>(this.resourceUrl, { params: options, observe: 'response' })\r\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\r\n    }\r\n\r\n    delete(id: number): Observable<HttpResponse<any>> {\r\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, { observe: 'response' });\r\n    }\r\n\r\n    protected convertDateFromClient(activity: IActivity): IActivity {\r\n        const copy: IActivity = Object.assign({}, activity, {\r\n            activitydate:\r\n                activity.activitydate != null && activity.activitydate.isValid() ? activity.activitydate.format(DATE_FORMAT) : null,\r\n            starttime: activity.starttime != null && activity.starttime.isValid() ? activity.starttime.format(DATE_FORMAT) : null,\r\n            endtime: activity.endtime != null && activity.endtime.isValid() ? activity.endtime.format(DATE_FORMAT) : null\r\n        });\r\n        return copy;\r\n    }\r\n\r\n    protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\r\n        if (res.body) {\r\n            res.body.activitydate = res.body.activitydate != null ? moment(res.body.activitydate) : null;\r\n            res.body.starttime = res.body.starttime != null ? moment(res.body.starttime) : null;\r\n            res.body.endtime = res.body.endtime != null ? moment(res.body.endtime) : null;\r\n        }\r\n        return res;\r\n    }\r\n\r\n    protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\r\n        if (res.body) {\r\n            res.body.forEach((activity: IActivity) => {\r\n                activity.activitydate = activity.activitydate != null ? moment(activity.activitydate) : null;\r\n                activity.starttime = activity.starttime != null ? moment(activity.starttime) : null;\r\n                activity.endtime = activity.endtime != null ? moment(activity.endtime) : null;\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n}\r\n"]}]}